detach("package:base", unload = TRUE)
library(base)
library(architect)
detach("package:architect", unload = TRUE)
remove.packages("architect")
library(magrittr)
library(purrr)
library(keyring)
library(data.table)
library(devtools)
git_creds <- source("C:/Users/Chionesu/OneDrive/Projekz/Templates & Snippets/export_keys.R")$value |>
map(~jsonlite::fromJSON(.x)) |>
rbindlist(idcol = "keyring") |>
setkey(service)
repos <- c("book.of.utilities", "book.of.workflow", "book.of.features", "DBOE", "event.vectors", "smart.data", "architect")
git_creds["github"] %$% map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "March2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = username, password = value)
)
})
git_creds["github"] %$% map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "March2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = username, password = value)
)
})
git_creds["github"] %$% map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "March2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = username, password = value)
)
})
library(architect)
# Basic Usage: mtcars with row names pre-pended >>>
define(mtcars)
# smart.data input >>>
smart_mt <- smart.data::smart.data$new(as.data.table(mtcars, keep.rownames = TRUE))$taxonomy.rule();
library(data.table)
library(stringi)
library(book.of.utilities)
library(book.of.workflow)
# Basic Usage: mtcars with row names pre-pended >>>
define(mtcars)
# smart.data input >>>
smart_mt <- smart.data::smart.data$new(as.data.table(mtcars, keep.rownames = TRUE))$taxonomy.rule();
define(smart_mt, list(j = 1, mpg) ~vs + am + use(identifier, category), ~j + mpg)
define(smart_mt, list(j = 1, mpg) ~vs + am + use(identifier, category), ~j + mpg)
define(smart_mt, ~vs + am + use(identifier, category))
define(smart_mt, x = sum(am^2) ~ use(identifier, category))[]
# No terms variant: output should be equivalent >>>
# debug(define)
define(smart_mt, mean(disp))
define(smart_mt, mean(disp) ~ 1)
# No terms variant: output should be equivalent >>>
# debug(define)
define(smart_mt, mean(disp))
define(smart_mt, mean(disp) ~ 1)
\(x) list(
natural_joins = .x[!grepl("[=$\\^()]", x)] |> stringi::stri_split_regex(pattern = "[, |]", simplify = TRUE)
, equi_joins	= .x[grepl("[=]{2}", x)] 		|> stringi::stri_split_regex(pattern = "[, |]", simplify = TRUE)
, fuzzy_joins	= .x[grepl("[$\\^()]", x)] 	|> stringi::stri_split_regex(pattern = "[, |]", simplify = TRUE)
)
\(x, y){
vars <- stringi::stri_replace_all_fixed(x, " ", "", vectorize_all = FALSE)
if (rlang::is_empty(vars)){ NULL } else {
rlang::exprs(
natural_joins = intersect(names(.this), !!vars)
, equi_joins = !!vars
, fuzzy_joins = purrr::keep(names(.this), \(j) grepl(!!vars, j))
)[[y]]
}
}
source("D:/Imperial Git Repos/architect/pkg/R/architect.R")
remove.packages("architect")
getwd()
devtools::check_installed()
check_installed()
?check_installed
rlang::check_installed("purrr")
rlang::check_installed("purrr (>= 1.0.0")
rlang::check_installed("purrr (>= 1.0.0)")
library(architect)
# Basic Usage: mtcars with row names pre-pended >>>
define(mtcars)
# smart.data input >>>
smart_mt <- smart.data::smart.data$new(as.data.table(mtcars, keep.rownames = TRUE))$taxonomy.rule();
library(smart.data)
library(purrr)
library(data.table)
library(stringi)
library(book.of.utilities)
library(book.of.workflow)
# smart.data input >>>
smart_mt <- smart.data::smart.data$new(as.data.table(mtcars, keep.rownames = TRUE))$taxonomy.rule();
define(smart_mt, list(j = 1, mpg) ~vs + am + use(identifier, category), ~j + mpg)
define(smart_mt, ~vs + am + use(identifier, category))
define(smart_mt, x = sum(am^2) ~ use(identifier, category))[]
# No terms variant: output should be equivalent >>>
# debug(define)
define(smart_mt, mean(disp))
define(smart_mt, mean(disp) ~ 1)
# No terms variant: output should be equivalent >>>
# debug(define)
define(smart_mt, mean(disp))
define(smart_mt, mean(disp) ~ 1)
# Define using 'smart.data' input, sending output to "smart cache" and then capturing output >>>
if (hasName(.GlobalEnv, "inspect")){ rm(inspect)}
inspect <- define(
smart_mt
, x = sum(am^2) ~ use(identifier, category)
, smart_key = cyl
, smart.data::smart.data$new(.SD, "defined")$taxonomy.rule()$cache_mgr(action = upd)
)
get.smart("defined")$use(category, identifier, retain = drat)
# pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
install.packages("pkgdown")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
remotes::install_github("delriaan/architect", "May2023")
install.packages(remotes)
install.packages("remotes")
install.packages("devtools")
install.packages("blogdown")
remotes::install_github("delriaan/architect", "May2023")
remotes::install_github("delriaan/architect", "April2023")
remotes::install_github("delriaan/architect", "April2023", "pkg")
remotes::install_github("delriaan/book.of.utilities", "May2023", "pkg")
remotes::install_github("delriaan/book.of.features", "May2023", "pkg")
remotes::install_github("delriaan/book.of.workflow", "May2023", "pkg")
remotes::install_github("delriaan/book.of.workflow", "April2023", "pkg")
remotes::install_github("delriaan/smart.data", "May2023", "pkg")
remotes::install_github("delriaan/event.vectors", "May2023", "pkg")
remotes::install_github("delriaan/DBOE", "May2023", "pkg")
remotes::install_github("delriaan/smart.data", "April2023", "pkg")
remotes::install_github("delriaan/architect", "April2023", "pkg")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(architect)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
